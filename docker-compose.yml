version: '3.8'

services:
  # API Gateway
  gateway:
    build:
      context: ./infrastructure/gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file: .env.production
    restart: always
    depends_on:
      - public-participation
      - civilbot
      - billbot
      - agri-insights
      - tech-blog
    networks:
      - app-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:3000"
    env_file: .env.production
    restart: always
    networks:
      - app-network

  # Public Participation Service
  public-participation:
    build:
      context: ./services/public-participation
      dockerfile: Dockerfile
    env_file: .env.production
    restart: always
    depends_on:
      - postgres
      - redis
      - neo4j
    networks:
      - app-network

  # CivilBot Service
  civilbot:
    build:
      context: ./services/civilbot
      dockerfile: Dockerfile
    env_file: .env.production
    restart: always
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  # BillBot Service
  billbot:
    build:
      context: ./services/billbot
      dockerfile: Dockerfile
    env_file: .env.production
    restart: always
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  # Agri-Insights Service
  agri-insights:
    build:
      context: ./services/agri-insights
      dockerfile: Dockerfile
    env_file: .env.production
    restart: always
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  # Tech Blog Service
  tech-blog:
    build:
      context: ./services/tech-blog
      dockerfile: Dockerfile
    env_file: .env.production
    restart: always
    depends_on:
      - mongodb
    networks:
      - app-network

  # Databases
  postgres:
    image: postgres:14-alpine
    env_file: .env.production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - app-network

  mongodb:
    image: mongo:5
    env_file: .env.production
    volumes:
      - mongo_data:/data/db
    restart: always
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - app-network

  neo4j:
    image: neo4j:4.4
    env_file: .env.production
    volumes:
      - neo4j_data:/data
    restart: always
    networks:
      - app-network

  # Monitoring
  prometheus:
    image: prom/prometheus
    volumes:
      - ./infrastructure/monitoring/prometheus:/etc/prometheus
    restart: always
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    ports:
      - "3005:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always
    networks:
      - app-network

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  neo4j_data:
  grafana_data:

networks:
  app-network:
    driver: bridge